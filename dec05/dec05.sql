with stacks as (
	select 	array_agg(col1) FILTER (WHERE col1 is not null),
			array_agg(col2) FILTER (WHERE col2 is not null) 
--			array_agg(col3) FILTER (WHERE col3 is not null) c,
--			array_agg(col4) FILTER (WHERE col4 is not null) d,
--			array_agg(col5) FILTER (WHERE col5 is not null) e,
--			array_agg(col6) FILTER (WHERE col6 is not null) f,
--			array_agg(col7) FILTER (WHERE col7 is not null) g,
--			array_agg(col8) FILTER (WHERE col8 is not null) h,
--			array_agg(col9) FILTER (WHERE col9 is not null) i
		from (
			select id,
				nullif(substr(puzzle_input,2,1),' ') col1,
				nullif(substr(puzzle_input,6,1),' ') col2,
				nullif(substr(puzzle_input,10,1),' ') col3,
				nullif(substr(puzzle_input,14,1),' ') col4,
				nullif(substr(puzzle_input,18,1),' ') col5,
				nullif(substr(puzzle_input,22,1),' ') col6,
				nullif(substr(puzzle_input,26,1),' ') col7,
				nullif(substr(puzzle_input,30,1),' ') col8,
				nullif(substr(puzzle_input,34,1),' ') col9
			from INITIAL_STACKS_DEC05
			where id <=8
		) x
)
select * from stacks;
,
moves as (
	select * from INITIAL_STACKS_DEC05, regexp_match(puzzle_input,'^move ([\d]+) from ([\d]+) to ([\d]+)') as t
	where id >= 11
)
	select * from moves
	join lateral ( 
		select format($$"a%s"$$,t[2])::regclass from stacks
	) a on true;


select a1, a2, array_cat(a1[1:2],a2) from stacks;
,
moved as (
	
)
select a1[1],a2[1],a3[1],a4[1],a5[1],a6[1],a7[1],a8[1],a9[1]
from stacks;

select string_to_table(x,' ') from (
	select replace(string_to_table(puzzle_input,
	
	
	$$    [G] [R]                 [P]    
    [H] [W]     [T] [P]     [H]    
    [F] [T] [P] [B] [D]     [N]    
[L] [T] [M] [Q] [L] [C]     [Z]    
[C] [C] [N] [V] [S] [H]     [V] [G]
[G] [L] [F] [D] [M] [V] [T] [J] [H]
[M] [D] [J] [F] [F] [N] [C] [S] [F]
[Q] [R] [V] [J] [N] [R] [H] [G] [Z]
 1   2   3   4   5   6   7   8   9$$,CHR(13)),'   ','[|]') x
) a;
 
create table initial_stacks_dec05 (
	id integer generated by default as identity,
	puzzle_input text
);

select * from INITIAL_STACKS_DEC05;